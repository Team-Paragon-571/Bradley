// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package org.frc571.bradley;

import org.frc571.bradley.commands.AutonomousCommand;
import org.frc571.bradley.commands.DriveCommand;
import org.frc571.bradley.commands.EjectCommand;
import org.frc571.bradley.commands.IntakeCommand;
import org.frc571.bradley.commands.ShootCommand;
import org.frc571.bradley.commands.StopIntakeCommand;
import org.frc571.bradley.subsystems.Drive;
import org.frc571.bradley.subsystems.Index;
import org.frc571.bradley.subsystems.Intake;
import org.frc571.bradley.subsystems.Shoot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems
  public final Shoot m_shoot = new Shoot();
  public final Index m_index = new Index();
  public final Intake m_intake = new Intake();
  public final Drive m_drive = new org.frc571.bradley.subsystems.Drive();

  // Joysticks
  private final XboxController operatorController = new XboxController(0);

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems

    // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_drive.setDefaultCommand(new DriveCommand(operatorController::getLeftY, operatorController::getRightX, m_drive));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("AutonomousCommand", new AutonomousCommand(m_drive));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons
    final JoystickButton ejectButton = new JoystickButton(operatorController, XboxController.Button.kX.value);
    ejectButton.whenPressed(new EjectCommand(m_intake), true);
    // SmartDashboard.putData("EjectButton", new EjectCommand(m_intake));

    final JoystickButton stopIntakeButton = new JoystickButton(operatorController, XboxController.Button.kB.value);
    stopIntakeButton.whenPressed(new StopIntakeCommand(m_intake), true);
    // SmartDashboard.putData("StopIntakeButton", new StopIntakeCommand(m_intake));

    final JoystickButton shootButton = new JoystickButton(operatorController, XboxController.Button.kY.value);
    shootButton.whenPressed(new ShootCommand(m_shoot), true);
    // SmartDashboard.putData("ShootButton", new ShootCommand(m_shoot));

    final JoystickButton intakeButton = new JoystickButton(operatorController, XboxController.Button.kA.value);
    intakeButton.whenPressed(new IntakeCommand(m_intake, m_index), true);
    // SmartDashboard.putData("IntakeButton", new IntakeCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  public XboxController getOperatorController() {
    return operatorController;
  }

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

  public Drive getDrive() {
      return m_drive;
  } 

}
